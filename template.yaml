AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  CollAction backend

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst

Globals:
  Function:
    Timeout: 10

Parameters:
  Stage:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
  FirebaseProjectId:
    Type: String
  DomainParameter:
    Type: String
    Description: "Domain name without subdomains (If this is empty no custom (sub-)domains are set up)"
  SubdomainSuffixParameter:
    Type: String
    Description: "Suffix to apply to all subdomains within this stack"
  HostedZoneIdParameter:
    Type: String
    Description: "Hosted Zone Id of the specified domain (Only for custom domain)"
  AcmCertificateArnParameter:
    Type: String
    Description: "ARN of certificate for CloudFront in region us-east-1 (Only for custom domain)"
  
Conditions:
  shouldUseCustomDomainNames: !Not [!Equals [!Ref DomainParameter, ""]]

Resources:

  DnsRecords: 
    Type: AWS::Route53::RecordSetGroup
    Condition: shouldUseCustomDomainNames
    Properties:
      HostedZoneId: !Ref HostedZoneIdParameter
      RecordSets:
        - Name: !Sub "static${SubdomainSuffixParameter}.${DomainParameter}"
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2 # Fixed value according to documentation (https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-route53.html)
            DNSName: !GetAtt StaticContentDistribution.DomainName
        - Name: !Sub "api${SubdomainSuffixParameter}.${DomainParameter}"
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt HttpApiDomainName.RegionalHostedZoneId
            DNSName: !GetAtt HttpApiDomainName.RegionalDomainName

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Condition: shouldUseCustomDomainNames
    Properties:
      DomainName: !Sub "*.${DomainParameter}"
      SubjectAlternativeNames:
        - !Ref DomainParameter
        - !Sub "*.${DomainParameter}"
      DomainValidationOptions:
        - DomainName: !Ref DomainParameter
          HostedZoneId:
            Ref: HostedZoneIdParameter
      ValidationMethod: DNS

  CloudFrontOriginIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Condition: shouldUseCustomDomainNames
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "origin identity for static content distribution"

  StaticContentDistribution:
    Type: AWS::CloudFront::Distribution
    Condition: shouldUseCustomDomainNames
    Properties: 
      DistributionConfig:
        DefaultCacheBehavior:
          AllowedMethods: [HEAD, DELETE, POST, GET, OPTIONS, PUT, PATCH]
          TargetOriginId: StaticBucketOrigin
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
        Enabled: true
        Aliases:
          - !Sub "static${SubdomainSuffixParameter}.${DomainParameter}"
        Origins:
          - Id: StaticBucketOrigin
            DomainName: !Sub ${StaticHostingBucket}.s3.${ AWS::Region }.amazonaws.com
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginIdentity}'
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCertificateArnParameter
          MinimumProtocolVersion: TLSv1.1_2016
          SslSupportMethod: sni-only

  HttpApiDomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Condition: shouldUseCustomDomainNames
    Properties: 
      DomainName: !Sub "api${SubdomainSuffixParameter}.${DomainParameter}"
      DomainNameConfigurations: 
        - EndpointType: REGIONAL
          CertificateArn: !Ref Certificate

  HttpApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Condition: shouldUseCustomDomainNames
    Properties: 
      ApiMappingKey: ""
      DomainName: !Sub "api${SubdomainSuffixParameter}.${DomainParameter}"
      ApiId: !Ref HttpApi
      Stage: !Ref Stage
    DependsOn: HttpApiDomainName

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        Authorizers:
          FirebaseAuthorizer:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              audience:
                - !Ref FirebaseProjectId
              issuer: !Sub https://securetoken.google.com/${FirebaseProjectId}
        DefaultAuthorizer: FirebaseAuthorizer
      StageName: !Ref Stage
      CorsConfiguration:
        AllowMethods: [GET]
        AllowOrigins: [http://localhost:8080]
      
  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: hello-world/
      Handler: hello-world
      Runtime: go1.x
      Architectures:
        - x86_64
      Tracing: Active # https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html
      Events:
        HelloWorld:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: get
            ApiId: !Ref HttpApi
            Auth:
              Authorizer: "NONE"

  EmailContactFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: email_contact/
      Handler: email_contact
      Runtime: go1.x
      Events:
        Contact:
          Type: HttpApi
          Properties:
            Path: /contact
            Method: post
            ApiId: !Ref HttpApi
            Auth:
              Authorizer: "NONE"
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'ses:SendEmail'
                - 'ses:SendRawEmail'
              Resource: '*'
  ProfilePictureUploadBucket:
    Type: 'AWS::S3::Bucket'

  StaticHostingBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      WebsiteConfiguration:
        IndexDocument: index.html
        # TODO does not seem to work using CloudFront
        # RoutingRules:
        #   - RoutingRuleCondition:
        #       HttpErrorCodeReturnedEquals: '403'
        #       KeyPrefixEquals: profile-pictures/
        #     RedirectRule:
        #       ReplaceKeyWith: profile-pictures/anonymous.png

  UploadProfilePictureFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: upload-profile-picture/
      Handler: upload-profile-picture
      Runtime: go1.x
      Environment:
        Variables:
          BUCKET: !Ref ProfilePictureUploadBucket
      Policies:
        - Statement:
          - Effect: Allow
            Action: 
              - s3:PutObject*
            Resource: '*'
      Events:
        ProfilePictureUpload:
          Type: HttpApi
          Properties:
            Path: /upload-profile-picture
            Method: get
            ApiId: !Ref HttpApi

  ProcessProfilePictureFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: process-profile-picture/
      Handler: process-profile-picture
      Runtime: go1.x
      Environment:
        Variables:
          # Beware of recursive execution! Double check referenced buckets!
          OUTPUT_BUCKET_NAME: !Ref StaticHostingBucket
          KEY_PREIFX: profile-pictures/
      Policies:
        - Statement:
          - Effect: Allow
            Action: 
              - s3:GetObject*
              - s3:PutObject*
              - s3:DeleteObject*
              - rekognition:DetectModerationLabels
            Resource: '*'
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref ProfilePictureUploadBucket
            Events: s3:ObjectCreated:*

  WhoamiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: whoami/
      Handler: whoami
      Runtime: go1.x
      Events:
        Whoami:
          Type: HttpApi
          Properties:
            Path: /whoami
            Method: get
            ApiId: !Ref HttpApi

Outputs:
  HttpApiHelloWorld:
    Description: "API Gateway endpoint URL for deployed stage for Hello World function"
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/hello"
  CustomDomainHttpApiHelloWorld:
    Condition: shouldUseCustomDomainNames
    Description: "API Gateway endpoint URL for deployed stage for Hello World function"
    Value: !Sub "https://api${SubdomainSuffixParameter}.${DomainParameter}/hello"
  CustomDomainStaticEndpoint:
    Condition: shouldUseCustomDomainNames
    Description: "CloudFront distribution endpoint URL for static files"
    Value: !Sub "https://static${SubdomainSuffixParameter}.${DomainParameter}/"
