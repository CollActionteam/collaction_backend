AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  CollAction backend

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst

Globals:
  Function:
    Timeout: 10
    Environment:
      Variables:
        LOCAL_RESOURCES_ONLY: !Ref LocalResourcesOnly

Parameters:
  Stage:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
  LocalResourcesOnly:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
  FirebaseProjectId:
    Type: String

Resources:

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        Authorizers:
          FirebaseAuthorizer:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              audience:
                - !Ref FirebaseProjectId
              issuer: !Sub https://securetoken.google.com/${FirebaseProjectId}
        DefaultAuthorizer: FirebaseAuthorizer
      StageName: !Ref Stage
      CorsConfiguration:
        AllowMethods:
          - GET
        AllowOrigins:
          - http://localhost:8080
      
  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: hello-world/
      Handler: hello-world
      Runtime: go1.x
      Architectures:
        - x86_64
      Tracing: Active # https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html
      Events:
        HelloWorld:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: get
            ApiId: !Ref HttpApi
            Auth:
              Authorizer: "NONE"

  EmailContactFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: email_contact/
      Handler: email_contact
      Runtime: go1.x
      Events:
        Contact:
          Type: HttpApi
          Properties:
            Path: /contact
            Method: post
            ApiId: !Ref HttpApi
            Auth:
              Authorizer: "NONE"
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'ses:SendEmail'
                - 'ses:SendRawEmail'
              Resource: '*'
  ProfilePictureUploadBucket:
    Type: 'AWS::S3::Bucket'

  StaticHostingBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        RoutingRules:
          - RoutingRuleCondition:
              HttpErrorCodeReturnedEquals: '404'
              KeyPrefixEquals: profile-pictures/
            RedirectRule:
              ReplaceKeyWith: profile-pictures/anonymous.png

  UploadProfilePictureFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: upload-profile-picture/
      Handler: upload-profile-picture
      Runtime: go1.x
      Environment:
        Variables:
          BUCKET: !Ref ProfilePictureUploadBucket
      Policies:
        - Statement:
          - Effect: Allow
            Action: 
              - s3:PutObject*
            Resource: '*'
      Events:
        ProfilePictureUpload:
          Type: HttpApi
          Properties:
            Path: /upload-profile-picture
            Method: get
            ApiId: !Ref HttpApi

  ProcessProfilePictureFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: process-profile-picture/
      Handler: process-profile-picture
      Runtime: go1.x
      Environment:
        Variables:
          # Beware of recursive execution! Double check referenced buckets!
          OUTPUT_BUCKET_NAME: !Ref StaticHostingBucket
          KEY_PREIFX: profile-pictures/
      Policies:
        - Statement:
          - Effect: Allow
            Action: 
              - s3:GetObject*
              - s3:PutObject*
              - s3:DeleteObject*
              - rekognition:DetectModerationLabels
            Resource: '*'
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref ProfilePictureUploadBucket
            Events: s3:ObjectCreated:*

  CrowdactionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Crowdaction
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      AttributeDefinitions:
        -
          AttributeName: "pk"
          AttributeType: "S"
        -
          AttributeName: "sk"
          AttributeType: "S"
        -
          AttributeName: "code"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "pk"
          KeyType: "HASH"
        -
          AttributeName: "sk"
          KeyType: "RANGE"
      LocalSecondaryIndexes:
        -
          IndexName: "LSI_code"
          KeySchema:
            -
              AttributeName: "pk"
              KeyType: "HASH"
            -
              AttributeName: "code"
              KeyType: "RANGE"
          Projection:
            ProjectionType: ALL

  CrowdactionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: crowdaction/
      Handler: crowdaction
      Runtime: go1.x
      Events:
        FetchCrowdaction:
          Type: HttpApi
          Properties:
            Path: /crowdactions/{crowdactionID}
            Method: get
            ApiId: !Ref HttpApi
            Auth:
              Authorizer: "NONE"
        FetchCrowdactions:
          Type: HttpApi
          Properties:
            Path: /crowdactions
            Method: get
            ApiId: !Ref HttpApi
            Auth:
              Authorizer: "NONE"
      Environment:
        Variables:
          CROWDACTION_TABLE: !Ref CrowdactionTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              !Ref CrowdactionTable

  WhoamiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: whoami/
      Handler: whoami
      Runtime: go1.x
      Events:
        Whoami:
          Type: HttpApi
          Properties:
            Path: /whoami
            Method: get
            ApiId: !Ref HttpApi

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HttpApiHelloWorld:
    Description: "API Gateway endpoint URL for deployed stage for Hello World function"
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/hello"
  TableName:
    Value: !Ref  CrowdactionTable
    Description: Table name of the newly created DynamoDB table