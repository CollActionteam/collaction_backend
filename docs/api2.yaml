openapi: 3.0.1
info:
  title: collaction-dev
  version: "1.0"
servers:
  - url: "https://api{subdomainSuffix}.{domain}/"
    variables:
      subdomainSuffix:
        default: "-dev"
      domain:
        default: collaction.org
paths:
  "/crowdactions/{crowdactionID}":
    get:
      tags:
        - Crowdaction
      summary: Get details of a specific crowdaction
      parameters:
        - $ref: "#/components/parameters/ApiVersionParameter"
        - name: crowdactionID
          in: path
          required: true
          schema:
            type: string
        - in: query
          name: password
          description: Only include if crowdaction requires password
          required: false
          schema:
            type: string
            format: password
      responses:
        "200":
          description: Crowdaction details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: success
                  data:
                    allOf:
                      - type: object
                        properties:
                          crowdactionID:
                            type: string
                            example: >-
                              sustainability#food#88615462-2789-4159-8659-2ecfd33ef305
                      - $ref: "#/components/schemas/CrowdactionDetails"
        "401":
          description: Unauthorized (Invalid password)
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: fail
                  data:
                    type: string
                    example:
                      password: Invalid or missing password
        "403":
          $ref: "#/components/responses/UnsupportedClientVersion"
        "404":
          description: Crowdaction not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: fail
                  data:
                    type: string
                    example:
                      password: crowdaction does not exist
  "/crowdactions/{crowdactionID}/participants":
    get:
      tags:
        - Crowdaction
      summary: Get details of a specific crowdaction
      parameters:
        - $ref: "#/components/parameters/ApiVersionParameter"
        - name: crowdactionID
          in: path
          required: true
          schema:
            type: string
        - in: query
          name: password
          description: Only include if crowdaction requires password
          required: false
          schema:
            type: string
            format: password
      responses:
        "200":
          description: Crowdaction details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: success
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Participation"
        "401":
          description: Unauthorized (Invalid password)
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: fail
                  data:
                    type: string
                    example:
                      password: Invalid or missing password
        "403":
          $ref: "#/components/responses/UnsupportedClientVersion"
        "404":
          description: Crowdaction not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: fail
                  data:
                    type: string
                    example:
                      password: crowdaction does not exist
  /crowdactions:
    get:
      tags:
        - Crowdaction
      summary: Get list of crowdactions
      parameters:
        - $ref: "#/components/parameters/ApiVersionParameter"
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              - featured
              - joinable
              - active
              - ended
      responses:
        "200":
          description: List of crowdactions
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: success
                  data:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            crowdactionID:
                              type: string
                              example: >-
                                sustainability#food#88615462-2789-4159-8659-2ecfd33ef305
                        - $ref: "#/components/schemas/CrowdactionListItem"
        "403":
          $ref: "#/components/responses/UnsupportedClientVersion"
  "/crowdactions/{crowdactionID}/participation":
    parameters:
      - $ref: "#/components/parameters/ApiVersionParameter"
      - name: crowdactionID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Crowdaction
      summary: Get existing participation in a particular crowdaction
      responses:
        "200":
          description: Success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: success
                  data:
                    $ref: "#/components/schemas/Participation"
        "403":
          $ref: "#/components/responses/UnsupportedClientVersion"
        "404":
          description: Not found (Not participating)
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: fail
                  data:
                    type: object
                    default:
                      crowdactionID: not participating
      security:
        - FirebaseAuthorizer: []
    delete:
      tags:
        - Crowdaction
      summary: Stop participating in a particular crowdaction
      responses:
        "200":
          description: Success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: success
                  data:
                    default: null
        "403":
          $ref: "#/components/responses/UnsupportedClientVersion"
        "404":
          description: Not found (Not participating)
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: fail
                  data:
                    type: object
                    default:
                      crowdactionID: not participating
      security:
        - FirebaseAuthorizer: []
    post:
      tags:
        - Crowdaction
      summary: Participate in a particular crowdaction
      parameters:
        - in: query
          name: password
          description: Only include if crowdaction requires password
          required: false
          schema:
            type: string
            format: password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                commitments:
                  type: array
                  items:
                    type: string
                  example:
                    - no-meat
                    - no-dairy
      responses:
        "201":
          description: Success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: success
                  data:
                    default: null
        "400":
          description: Bad request (Invalid commitments)
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: fail
                  data:
                    type: string
                    example:
                      commitments: Required commitment "no-beef" missing
        "401":
          description: Unauthorized (Invalid password)
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: fail
                  data:
                    type: string
                    example:
                      password: Invalid or missing password
        "403":
          $ref: "#/components/responses/UnsupportedClientVersion"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: fail
                  data:
                    type: string
                    default:
                      crowdactionID: already participating
      security:
        - FirebaseAuthorizer: []
  "/profiles/{userID}":
    parameters:
      - $ref: "#/components/parameters/ApiVersionParameter"
      - name: userID
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - Profile
      summary: Create a profile for a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Profile"
      responses:
        "201":
          description: Profile was created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    default: null
                  status:
                    type: string
                    default: success
        "400":
          description: Bad request (Validation failed)
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: fail
                  data:
                    type: object
                    example:
                      displayname: Name must not be empty
        "403":
          $ref: "#/components/responses/UnsupportedClientVersion"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: fail
                  data:
                    type: object
                    default:
                      userID: Profile already exists
      security:
        - FirebaseAuthorizer: []
    put:
      tags:
        - Profile
      summary: Update the profile of an existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Profile"
      security:
        - FirebaseAuthorizer: []
      responses:
        "200":
          description: Profile was updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    default: null
                  status:
                    type: string
                    default: success
        "400":
          description: Bad request (Validation failed)
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: fail
                  data:
                    type: object
                    example:
                      displayname: Name must not be empty
        "403":
          $ref: "#/components/responses/UnsupportedClientVersion"
        "404":
          description: Profile was not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: fail
                  data:
                    type: object
                    default:
                      userID: No such profile
    get:
      tags:
        - Profile
      summary: View the profile of a user
      responses:
        "200":
          description: Profile was found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: success
                  data:
                    $ref: "#/components/schemas/Profile"
        "403":
          $ref: "#/components/responses/UnsupportedClientVersion"
        "404":
          description: Profile was not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: fail
                  data:
                    type: object
                    default:
                      userID: No such profile
  /profiles/{userID}/participations:
    parameters:
      - $ref: "#/components/parameters/ApiVersionParameter"
      - name: userID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Profile
      summary: View the participations of a user
      responses:
        "200":
          description: Profile was found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: success
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Participation"
        "403":
          $ref: "#/components/responses/UnsupportedClientVersion"
        "404":
          description: Profile was not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: fail
                  data:
                    type: object
                    default:
                      userID: No such profile
  /upload-profile-picture:
    parameters:
      - $ref: "#/components/parameters/ApiVersionParameter"
    get:
      tags:
        - Profile
      summary: Fetch an upload URL (POST) for the profile picture
      responses:
        "200":
          description: >-
            Returns the URL where to upload (PUT) the square png image
            (250-1024px)
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      upload_url:
                        type: string
                        format: uri
        "403":
          $ref: "#/components/responses/UnsupportedClientVersion"
      security:
        - FirebaseAuthorizer: []
  /contact:
    parameters:
      - $ref: "#/components/parameters/ApiVersionParameter"
    post:
      tags:
        - Other
      summary: Send a message to CollAction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: "#/components/schemas/Email"
                nonce:
                  type: string
                  example: c2dlcjIzc3NndnJzdnIyM
                  description: |
                    Nonce for PoW, see http://www.hashcash.org/
                    (Not yet implemented -> field will be ignored if present)
      responses:
        "200":
          description: The status code indicates if the message was successfully sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: success
                  data:
                    default: null
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: fail
                  data:
                    type: object
                    example:
                      email: Not a valid email address
        "403":
          $ref: "#/components/responses/UnsupportedClientVersion"
components:
  parameters:
    ApiVersionParameter:
      name: X-CollActionAPI-Version
      in: header
      required: false
      description: |
        Semantic version of the API used by the client
        (This parameter is currently not required, but might be in the future)
      schema:
        type: string
        pattern: '^[0-9]+\.[0-9]+$'
        example: "1.0"
  responses:
    UnsupportedClientVersion:
      description: Forbidden (Client version unsupported)
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                default: fail
              data:
                type: object
                example:
                  X-CollActionAPI-Version: Unsupported client version! (Please update to 1.0)
  securitySchemes:
    FirebaseAuthorizer:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    CrowdactionDetails:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        category:
          type: string
        subcategory:
          type: string
        location:
          $ref: "#/components/schemas/Location"
        dates:
          $ref: "#/components/schemas/CrowdactionDates"
        password_required:
          type: boolean
        commitment_options:
          type: array
          items:
            $ref: "#/components/schemas/CommitmentOption"
        participation:
          $ref: "#/components/schemas/Date"
        images:
          type: object
          properties:
            banner:
              $ref: "#/components/schemas/Image"
    CrowdactionListItem:
      type: object
      properties:
        title:
          type: string
        category:
          type: string
        subcategory:
          type: string
        location:
          $ref: "#/components/schemas/Location"
        dates:
          $ref: "#/components/schemas/CrowdactionDates"
        password_required:
          type: boolean
        participation:
          $ref: "#/components/schemas/ParticipationSummary"
        images:
          type: object
          properties:
            card:
              $ref: "#/components/schemas/Image"
    CrowdactionDates:
      type: object
      description: >-
        Whatever comes first between `end` and `join_before` applies for the
        latter
      properties:
        start:
          $ref: "#/components/schemas/Date"
        end:
          $ref: "#/components/schemas/Date"
        join_before:
          $ref: "#/components/schemas/Date"
    Location:
      type: object
      properties:
        country:
          type: string
          example: NL
        city:
          type: string
          example: Amsterdam
    CommitmentOption:
      type: object
      properties:
        id:
          type: string
          example: vegetarian
        label:
          type: string
          example: Becoming vegetarian
        description:
          type: string
          example: I will not eat any meat from any animal (including fish).
        requires:
          type: array
          description: >
            Commitments that are included in (and required by) this commitment.
            They can also be individually selected
          items:
            $ref: "#/components/schemas/CommitmentOption"
            example:
              id: no-beef
              label: Not eating beef
              description: I will avoid eating beef (Goodbye stake).
    Date:
      type: string
      pattern: '\d{4}-\d{2}-\d{2}'
      example: "2021-11-28"
    ParticipationSummary:
      type: object
      properties:
        participant_count:
          type: integer
        top_participants:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: Peter Parker
              userID:
                type: string
                format: uuid
    Image:
      type: object
      properties:
        url:
          type: string
          example: "https://picsum.photos/300/200"
          format: uri
        blur_hash:
          type: string
          example: LEHV6nWB2yk8pyo0adR*.7kCMdnj
          description: "(see https://blurha.sh/)"
    Participation:
      type: object
      properties:
        userID:
          type: string
        name:
          type: string
          description: Displayname of the user
        crowdactionID:
          type: string
          example: "sustainability#food#88615462-2789-4159-8659-2ecfd33ef305"
        title:
          type: string
          description: Title of the crowdactions
        commitments:
          type: array
          items:
            type: string
          example:
            - vegetarian
            - no-dairy
          description: Array of commitment ids
        date:
          $ref: "#/components/schemas/Date"
    Profile:
      type: object
      properties:
        displayname:
          type: string
          example: Max Murphy
        location:
          $ref: "#/components/schemas/Location"
        bio:
          type: string
          example: >-
            Hi, I am Max and I am trying to eat less meat to stop animal
            suffering.
    Email:
      type: object
      properties:
        email:
          type: string
          description: Email address to which the response to the inquiry should be sent
          format: email
        subject:
          type: string
          example: Hello world
        message:
          type: string
          example: "Please respond to this email :)"
        app_version:
          type: string
          pattern: '^(?:ios|android) [0-9]+\.[0-9]+\.[0-9]+\+[0-9]+$'
          example: android 1.0.1+1
